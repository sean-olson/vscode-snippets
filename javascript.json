{
	"AMD require statement": {
		"prefix": "require",
		"body": [
			"const {$2} = require('$1')"
		],
		"description": "Basic require statement"
	},
	"Fetch GET Call": {
		"prefix": "fetch_get",
		"body": [
			"fetch('$1')",
		    ".then((response) => {",
		    "  return response.json();",
		    "})",
		    ".then((data) => {",
		    "  resolve({ status: 'OK', data });",
		    "})",
		    ".catch((err) => {",
		    "  reject({ err });",
		    "});"
		],
		"description": "fetch-get snip"
	},
	"Fetch POST Call": {
		"prefix": "fetch_post",
		"body": [
			"fetch('$1', {",
			"  method: 'POST',",
			"  headers: {",
			"    'Content-Type': 'application/json',",
			"    'Accept': 'application/json'",
			"  },",
			"  body: JSON.stringify({$2})",
			"  })",
			"  .then((response) => {",
			"    return response.json();",
			"  })",
			"  .then((data) => {",
			"    resolve({ status: 'OK', data });",
			"  })",
			"  .catch((err) => {",
			"    reject({ err });",
			"  });"
		],
		"description": "fetch-post snip"
	},
	"Promise declaration": {
		"prefix": "promise_declaration",
		"body": [
			"return $1new Promise((resolve, reject) => {",
			"  async_method_call$2({})",
			"    .then((result) => {",
			"      $3",			
			"      resolve();", 
			"    })",
			"    .catch((err) => {",
			"      $4reject();",
			"    })",
			"});"
		],
		"description": "Promise declaration"
	},
	"Async call with Promise": {
		"prefix": "promise_call",
		"body": [
			"  async_method_call$1({})",
			"    .then((result) => {",
			"      $2",			
			"      resolve();", 
			"    })",
			"    .catch((err) => {",
			"      $3reject();",
			"    });"
		],
		"description": "Async call with Promise"
	},
	"Promise.all Snip": {
		"prefix": "promise_all_snip",
		"body": [
			"  Promise.all(promise_array$1)",
			"    .then((results) => {",
			"      $2",			
			"      resolve();", 
			"    })",
			"    .catch((err) => {",
			"      $3reject();",
			"    });"
		],
		"description": "Promise.all Snip"
	}			
}
